local jcd = shell.resolve("/"..fs.combine(fs.getDir(shell.getRunningProgram()), ".."))

local libDir = fs.combine(jcd, "lib")
for i,v in ipairs(fs.list(libDir)) do
    if not v:find("^%.") and not _G[v] then
        os.loadAPI(fs.combine(libDir, v))
    end
end

---------------------------------------------------------------------------------------------------------------
-- Parse arguments
---------------------------------------------------------------------------------------------------------------
local parser = argparse.new()
parser
    :switch"debug"
    :shortcut"d"
parser
    :switch"time"
    :shortcut"t"
parser
    :switch"g"
parser
    :parameter"classpath"
    :shortcut"cp"
    :multi()
parser
    :parameter"output"
    :shortcut"o"
parser
    :argument"mainclass"
parser
    :argument"javaArgs"
    :count"*"
parser:usage"Usage: jvml [args, ...] <main class> [java args, ...]"
local options = parser:parse({classpath={"/" .. fs.combine(jcd, "CCLib/build/classes"), "."},javaArgs={}}, ...)
if not options then
    return
end


---------------------------------------------------------------------------------------------------------------
-- Load the VM
---------------------------------------------------------------------------------------------------------------
for i,v in ipairs(options.classpath) do
    options.classpath[i] = shell.resolve(v)
end
local vm = setmetatable({
    jcd = jcd,
    jcp = table.concat(options.classpath, ":"),
}, {__index=getfenv()})

local outputFile
if options.output then
    outputFile = assert(fs.open(options.output, "w"), "Failed to open " .. options.output)
    vm.print = function(...)
        print(...)
        for i,v in ipairs({...}) do
            outputFile.write(tostring(v))
        end
        outputFile.write("\n")
    end
end

vm.debugMode = options.debug
if options.debug then
    local handle = fs.open(fs.combine(jcd, 'debug'), 'w')
    vm.debugH = handle
else
    vm.debugH = {write=function() end, flush=function() end, close=function() end}
end

local nloadfile = loadfile
local function dofile(path, ...)
    local f = assert(nloadfile(path))
    setfenv(f, vm)
    return f(...)
end

function vm.loadfile(path)
    local h = fs.open(path, "r")
    local f, err = loadstring(h.readAll(), fs.getName(path))
    h.close()
    setfenv(f, vm)
    return f, err
end

do -- load LAT with jvml as virtually the root
    local f = assert(nloadfile(fs.combine(vm.jcd, "lasm/LAT.lua")))
    setfenv(f, setmetatable({
        loadfile=function(path)
            return vm.loadfile(fs.combine(vm.jcd, path))
        end
    }, {
        __index=vm,
        __newindex=vm
    }))
    f()
end
dofile(fs.combine(vm.jcd, "jvml_data/vm/classpath.lua"))
dofile(fs.combine(vm.jcd, "jvml_data/vm/jit.lua"))
dofile(fs.combine(vm.jcd, "jvml_data/vm/classloader.lua"))
dofile(fs.combine(vm.jcd, "jvml_data/vm/arrays.lua"))

---------------------------------------------------------------------------------------------------------------
-- Run program
---------------------------------------------------------------------------------------------------------------
if not options.g then
    if not options.mainclass then
        parser:printUsage()
        return
    end

    -- Make java arguments array
    local jArray = vm.newArray(vm.getArrayClass("[Ljava.lang.String;"), #options.javaArgs)
    for i,v in ipairs(options.javaArgs) do
        jArray[5][i] = vm.toJString(v)
    end
    local m = vm.findMethod(vm.classByName(options.mainclass), "main([Ljava/lang/String;)V")[1]

    -- Begin
    local startTime
    if options.time then
        startTime = os.time()
    end

    local ok, err = pcall(m, jArray)
    if not ok then
        printError(err)
        vm.printStackTrace(true)
    end
    if options.time then
        local endTime = os.time()
        print("\nTime: ", endTime - startTime)
    end

    if options.output then
        outputFile.close()
    end
    vm.debugH.close()
else
    -- g flag means we're not running a program, we're letting someone attach to the vm
    jvml.pushVM(vm)
end