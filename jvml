local jcd = fs.getDir(shell.getRunningProgram())

os.loadAPI(fs.combine(jcd, "argparse"))
local parser = argparse.new()
parser
    :switch"debug"
    :shortcut"d"
parser
    :switch"time"
    :shortcut"t"
parser
    :parameter"classpath"
    :shortcut"cp"
    :multi()
parser
    :parameter"output"
    :shortcut"o"
parser
    :argument"mainclass"
parser
    :argument"javaArgs"
    :count"*"
parser:usage"Usage: jvml [args, ...] <main class> [java args, ...]"
local options = parser:parse({debug=false,time=false,classpath={"/" .. fs.combine(jcd, "CCLib/build/classes"), "."},javaArgs={}}, ...)
if not options then
    return
end
if not options.mainclass then
    parser:printUsage()
    return
end

local env = setmetatable({
    jcd = jcd,
    jcp = table.concat(options.classpath, ":")
}, {__index=getfenv()})

env.debugMode = options.debug
if options.debug then
    local handle = fs.open(fs.combine(jcd, 'debug'), 'w')
    env.debugH = handle
else
    env.debugH = {write=function() end, flush=function() end, close=function() end}
end

local nloadfile = loadfile
local function dofile(path, ...)
    local f = assert(nloadfile(path))
    setfenv(f, env)
    return f(...)
end

function env.loadfile(path)
    local h = fs.open(path, "r")
    local f, err = loadstring(h.readAll(), fs.getName(path))
    h.close()
    setfenv(f, env)
    return f, err
end

do -- load LAT with jvml as virtually the root
    local f = assert(nloadfile(fs.combine(env.jcd, "lasm/LAT.lua")))
    setfenv(f, setmetatable({
        loadfile=function(path)
            return env.loadfile(fs.combine(env.jcd, path))
        end
    }, {
        __index=env,
        __newindex=env
    }))
    f()
end
dofile(fs.combine(env.jcd, "jvml_data/vm/classpath.lua"))
dofile(fs.combine(env.jcd, "jvml_data/vm/jit.lua"))
dofile(fs.combine(env.jcd, "jvml_data/vm/classloader.lua"))
dofile(fs.combine(env.jcd, "jvml_data/vm/arrays.lua"))

-- Make java arguments array
local jArray = env.newArray(env.getArrayClass("[Ljava.lang.String;"), #options.javaArgs)
for i,v in ipairs(options.javaArgs) do
    jArray[5][i] = env.toJString(v)
end
local m = env.findMethod(env.classByName(options.mainclass), "main([Ljava/lang/String;)V")[1]

-- Begin
local startTime
if options.time then
    startTime = os.time()
end

local ok, err = pcall(m, jArray)
if not ok then
    printError(err)
    env.printStackTrace(true)
end
if options.time then
    local endTime = os.time()
    print("\nTime: ", endTime - startTime)
end
env.debugH.close()